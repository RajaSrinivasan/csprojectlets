using System;
using System.IO;
using System.Text;
using System.Collections.Generic;
using System.Security.Cryptography;
using System.Linq;

namespace ppm
{
    public class Passbase
    {
        const string pwsalt = "Pack my box with five dozen liquor jugs.";
        string dashes = new string('-' , 64);
        private Cli cli;

        private byte[] NormalizedPassword;          // Encrypt/Decrypt Password to the file
        private byte[] PlainText;                   // Payload
        private byte[] TextSignature;               // Signature of the payload
        private int PlainTextLength;                // to strip the padding
        private byte[] EncryptedText;
       
        private byte[] InitializationVector;        // Init Vector - Generated by the algorithm while creating


        private string CreationTime;
        private string FileContents;

        private List<Membership> Memberships;


        public string Hex(byte[] bin)
        {
            StringBuilder sb = new StringBuilder();
            for (int i=0; i < bin.Length; i++)
            {
                sb.Append(bin[i].ToString("x2"));
            }
            return sb.ToString();
        }

        public string Password
        {
            get
            {
                return Hex(NormalizedPassword);
            }
        }

        public void SetPassword(string pwd)
        {
            SHA256 digest = SHA256.Create();
            NormalizedPassword = digest.ComputeHash(Encoding.UTF8.GetBytes(pwsalt + pwd));
        }

        public Passbase(Cli _cli)
        {
            cli = _cli;
        }

        private bool Decrypt()
        {
            using (AesManaged aes = new AesManaged())
            {
                aes.Mode = CipherMode.CBC;
                aes.Padding = PaddingMode.Zeros;
                aes.Key = NormalizedPassword;
                aes.IV = InitializationVector;

                MemoryStream ms = new MemoryStream(EncryptedText);
                ICryptoTransform xfrm = aes.CreateDecryptor(aes.Key, aes.IV);

                CryptoStream cs = new CryptoStream(ms, xfrm, CryptoStreamMode.Read);
                BinaryReader reader = new BinaryReader(cs);
                //Console.WriteLine($"Encrypted text length {EncryptedText.Length}");

                byte[] ptblen = reader.ReadBytes(4);
                //Console.WriteLine($"Length {ptblen[0]} {ptblen[1]} {ptblen[2]} {ptblen[3]} {ptblen.Length}");

                byte[] ptsig = reader.ReadBytes(NormalizedPassword.Length);
                //Console.WriteLine($"Signature length {ptsig.Length}");

                byte[] paddedptb = reader.ReadBytes(EncryptedText.Length - 4 - NormalizedPassword.Length);
                byte[] ptb = new byte[BitConverter.ToInt32(ptblen)];
                Array.Copy(paddedptb, ptb,ptb.Length);
                //Console.WriteLine($"Plain text {ptb.Length}");

                SHA256 digest = SHA256.Create();
                digest.TransformBlock(ptb, 0, BitConverter.ToInt32(ptblen) , ptb, 0);
                digest.TransformFinalBlock(ptblen, 0, ptblen.Length);
                byte[] finalhash = digest.Hash;

                if (!finalhash.SequenceEqual(ptsig))
                {
                    Console.WriteLine("Hashes do not match");
                }
                //else
                //{
                //    Console.WriteLine("Hashes match");
                //}

                int plaintextlen = BitConverter.ToInt32(ptblen, 0);
                PlainText = new byte[plaintextlen];
                //Console.WriteLine($"Plaintext length {plaintextlen}");
                Array.Copy(ptb, PlainText, plaintextlen);
            }
            return true;
        }

        public bool Load()
        {
            BinaryReader br;

            try
            {
                br = new BinaryReader(new FileStream(cli.Filename , FileMode.Open));               
            }
            catch (IOException e)
            {
                Console.WriteLine($"{e.Message} \nError opening {cli.Filename}");
                return false;
            }
            AesManaged aes = new AesManaged();
            InitializationVector = br.ReadBytes(aes.IV.Length);
            FileInfo info = new System.IO.FileInfo(cli.Filename);
            EncryptedText = br.ReadBytes((int)info.Length);

            return Decrypt();
        }


        private void Encrypt()
        {
            using (AesManaged aes = new AesManaged())
            {                
                aes.Mode = CipherMode.CBC;
                aes.Padding = PaddingMode.Zeros;
                aes.Key = NormalizedPassword ;
                ICryptoTransform xfrm = aes.CreateEncryptor();
                byte[] iv = aes.IV ;
                InitializationVector = aes.IV;
                byte[] ptb = PlainText;
                byte[] ptblen = BitConverter.GetBytes(ptb.Length);
                SHA256 digest = SHA256.Create();
                digest.TransformBlock(ptb, 0, ptb.Length, ptb, 0);
                digest.TransformFinalBlock(ptblen, 0, ptblen.Length);

                byte[] finalhash = digest.Hash;


                using (MemoryStream ms = new MemoryStream())
                {
                    using (CryptoStream cs = new CryptoStream(ms, xfrm, CryptoStreamMode.Write))
                    {
                        BinaryWriter writer = new BinaryWriter(cs);
                        writer.Write(ptblen); 
                        writer.Write(finalhash); 
                        writer.Write(ptb);
                        writer.Close();
                        cs.Close();
                    }
                    //ms.Close();
                    EncryptedText = ms.ToArray();
                }
                aes.Clear();
                //Console.WriteLine($"Final length {EncryptedText.Length}");
            }
        }



        public bool Save()
        {
            DateTime today = DateTime.Today;
            FileContents = FileContents + "# Updated Date " + today.ToString() + " by Srini -------------------------------";

            Encrypt();
            BinaryWriter bw;
            try
            {
                bw = new BinaryWriter(new FileStream( cli.Filename , FileMode.Create));
            }
            catch (IOException e)
            {
                Console.WriteLine($"{e.Message} \n Cannot create file {cli.Filename}");
                return false;
            }
            bw.Write(InitializationVector);
            bw.Write(EncryptedText);
            bw.Close();
            return true;
        }

        public bool Create()
        {
            if (File.Exists(cli.Filename))
            {
                Console.WriteLine($"{cli.Filename} already exists. Not creating.");
                return true;
            }
            DateTime today = DateTime.Today;
            CreationTime = today.ToString();
            FileContents = "# Creation Date " + CreationTime + " by Srini -------------------------------";
            PlainText = Encoding.UTF8.GetBytes(FileContents);
            return Save();
        }

        public bool List()
        {
            if (Load())
            {
                FileContents = Encoding.UTF8.GetString(PlainText);
                Console.WriteLine(FileContents);
                return true;
            }
            return false;
        }

        public bool Test()
        {
            FileContents = "# Creation Date " + CreationTime + " by Srini --------------------------------";
            PlainText = Encoding.UTF8.GetBytes(FileContents);
            Encrypt();
            PlainText = null;
            Decrypt();
            string DecryptedContents = Encoding.UTF8.GetString(PlainText);
            Console.WriteLine($"Got back {DecryptedContents}");
            return true;
        }

        public Membership Lookup(string ctx, string uname)
        {
            return new Membership();
        }
        public bool Add(string ctx, string uname)
        {
            string pwd = cli.GetPassword(uname + "[" + ctx + "]" );
            return true;
        }
    }
}
